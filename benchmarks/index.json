{"project": "imas-mcp", "project_url": "#", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"22": "3b15202faf46c3421fee1623da69835c804c4b4f", "24": "a94e2603719096eafbd9f7d69382b3c26036a1c5", "25": "bd1fb7c814e6c9e389e822171dccdbd40ccd748d", "31": "28c0e7dbbeb23773261213f357abb5ea9c292ed1", "36": "1ce88fecf9cc1e2c776e64400a868feeb8193364", "38": "998253525758577b0c97f0c6a0ac3fe173639435", "39": "b33955f6bdd10a6578d7cebda2b71c6f6a8e2df5", "40": "0dcdebebfb92ffc62703ba41966e1d5a014ca4f9", "41": "12c2161ce2651e7d5993a6b16d4cff69bf92fd8c", "42": "aa499a29fc2c62aef344f9744e046ce043510f5b", "43": "6c826d7cb8841f6bd21aba46183f3fb4fc0358e8", "46": "3da08244c9a6f427c890a6f4e045406f19f1ab6d", "48": "07b2d7646a5d089972626c225b0396e1e7d9b2da", "51": "7cbea5ff0632ef78050d4f99ebd8c19b1c507676", "57": "af7887b20b7d0b6aedfa21256326b3df1fad9333", "58": "16bbadc1230825b396d616b5549cb009ef511fc2", "59": "a8763b6d7a5d6263188c07df24403fd88925c697", "60": "10edd7c8d3a372d395be4fb5a2284d4f46068969", "61": "11003ac38968466b08f29a4ee93fcd99835bf0c7", "83": "3282b41441228ccd4f56c26a8daf473081fff48a"}, "revision_to_date": {"22": 1749741133000, "24": 1749822259000, "25": 1749826306000, "31": 1750064370000, "36": 1750067941000, "38": 1750077280000, "39": 1750081429000, "40": 1750082308000, "41": 1750083046000, "42": 1750083181000, "43": 1750083669000, "46": 1750085671000, "48": 1750139728000, "51": 1751903455000, "57": 1752066105000, "58": 1752068583000, "59": 1752069338000, "60": 1752069633000, "61": 1752075263000, "83": 1753373855000}, "params": {"machine": ["github-actions"], "os": ["Linux Ubuntu 22.04.5 LTS"], "ram": ["15GB"], "python": ["3.12"], "branch": ["main", "HEAD"]}, "graph_param_list": [{"machine": "github-actions", "os": "Linux Ubuntu 22.04.5 LTS", "ram": "15GB", "python": "3.12", "branch": "main"}, {"machine": "github-actions", "os": "Linux Ubuntu 22.04.5 LTS", "ram": "15GB", "python": "3.12", "branch": "HEAD"}], "benchmarks": {"benchmarks.BulkExportBenchmarks.peakmem_export_ids_large": {"code": "class BulkExportBenchmarks:\n    def peakmem_export_ids_large(self):\n        \"\"\"Benchmark memory usage for large bulk export.\"\"\"\n    \n        async def run_export():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"export_ids\",\n                    {\n                        \"ids_list\": self.fixture.ids_pair,\n                        \"include_relationships\": True,\n                        \"include_physics_context\": True,\n                    },\n                )\n    \n        return asyncio.run(run_export())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "name": "benchmarks.BulkExportBenchmarks.peakmem_export_ids_large", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "60371579ec0df4216f3e2da2808daea1be86c63488bb6a54cffaa422ab2deca0"}, "benchmarks.BulkExportBenchmarks.time_export_ids_multiple": {"code": "class BulkExportBenchmarks:\n    def time_export_ids_multiple(self):\n        \"\"\"Benchmark bulk export with multiple IDS.\"\"\"\n    \n        async def run_export():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"export_ids\",\n                    {\"ids_list\": self.fixture.ids_pair, \"include_relationships\": True},\n                )\n    \n        return asyncio.run(run_export())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.BulkExportBenchmarks.time_export_ids_multiple", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "543b629ec4f482b3a6f9eef8c2b214ad22d97893cc8f64d1fc99cdec922b8f20", "warmup_time": -1}, "benchmarks.BulkExportBenchmarks.time_export_ids_single": {"code": "class BulkExportBenchmarks:\n    def time_export_ids_single(self):\n        \"\"\"Benchmark bulk export with single IDS.\"\"\"\n    \n        async def run_export():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"export_ids\",\n                    {\n                        \"ids_list\": [self.fixture.single_ids],\n                        \"include_relationships\": False,\n                        \"include_physics_context\": False,\n                    },\n                )\n    \n        return asyncio.run(run_export())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.BulkExportBenchmarks.time_export_ids_single", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "fb902901502e9079d6faddd8a58fe8fa56977863f20120195d866bae222f6dd6", "warmup_time": -1}, "benchmarks.BulkExportBenchmarks.time_export_ids_with_relationships": {"code": "class BulkExportBenchmarks:\n    def time_export_ids_with_relationships(self):\n        \"\"\"Benchmark bulk export with relationships.\"\"\"\n    \n        async def run_export():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"export_ids\",\n                    {\n                        \"ids_list\": self.fixture.ids_pair,\n                        \"include_relationships\": True,\n                        \"include_physics_context\": True,\n                    },\n                )\n    \n        return asyncio.run(run_export())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.BulkExportBenchmarks.time_export_ids_with_relationships", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a3d6c0234240e83ce77b8eeffd9f96934aeeeda64ff9062f5bbfb457358174b8", "warmup_time": -1}, "benchmarks.BulkExportBenchmarks.time_export_physics_domain": {"code": "class BulkExportBenchmarks:\n    def time_export_physics_domain(self):\n        \"\"\"Benchmark physics domain export.\"\"\"\n    \n        async def run_export():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"export_physics_domain\",\n                    {\"domain\": \"core_profiles\", \"include_cross_domain\": True},\n                )\n    \n        return asyncio.run(run_export())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.BulkExportBenchmarks.time_export_physics_domain", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "987867b35eb84d2417dede3b7b0aa60ccdecc0c96d1127f642783899630c5413", "warmup_time": -1}, "benchmarks.ExplainConceptBenchmarks.time_explain_concept_advanced": {"code": "class ExplainConceptBenchmarks:\n    def time_explain_concept_advanced(self):\n        \"\"\"Benchmark advanced concept explanation.\"\"\"\n    \n        async def run_explain():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"explain_concept\",\n                    {\"concept\": \"transport coefficients\", \"detail_level\": \"advanced\"},\n                )\n    \n        return asyncio.run(run_explain())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.ExplainConceptBenchmarks.time_explain_concept_advanced", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "1c5014635783ca7ad9783fa7b3e95412456f41dff3979217ff21f232c628d11a", "warmup_time": -1}, "benchmarks.ExplainConceptBenchmarks.time_explain_concept_basic": {"code": "class ExplainConceptBenchmarks:\n    def time_explain_concept_basic(self):\n        \"\"\"Benchmark basic concept explanation.\"\"\"\n    \n        async def run_explain():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"explain_concept\",\n                    {\"concept\": \"plasma temperature\", \"detail_level\": \"basic\"},\n                )\n    \n        return asyncio.run(run_explain())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.ExplainConceptBenchmarks.time_explain_concept_basic", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "cfe5eacff30097feca0d8550d31701e53a3070aa1806dfa5ead7058401ade77a", "warmup_time": -1}, "benchmarks.RelationshipBenchmarks.time_explore_relationships_depth_1": {"code": "class RelationshipBenchmarks:\n    def time_explore_relationships_depth_1(self):\n        \"\"\"Benchmark relationship exploration with depth 1.\"\"\"\n    \n        async def run_explore():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"explore_relationships\",\n                    {\n                        \"path\": \"core_profiles/profiles_1d/electrons/temperature\",\n                        \"max_depth\": 1,\n                    },\n                )\n    \n        return asyncio.run(run_explore())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.RelationshipBenchmarks.time_explore_relationships_depth_1", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4d276a2efae320bb022ad0121a08a10a45e06bd0c7c40d12667d1ce056263e1c", "warmup_time": -1}, "benchmarks.RelationshipBenchmarks.time_explore_relationships_depth_2": {"code": "class RelationshipBenchmarks:\n    def time_explore_relationships_depth_2(self):\n        \"\"\"Benchmark relationship exploration with depth 2.\"\"\"\n    \n        async def run_explore():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"explore_relationships\",\n                    {\n                        \"path\": \"core_profiles/profiles_1d/electrons/density\",\n                        \"max_depth\": 2,\n                    },\n                )\n    \n        return asyncio.run(run_explore())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.RelationshipBenchmarks.time_explore_relationships_depth_2", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b8b10a66481bc13a0c8999267bcd93d2831e2e2ab6ff1c8d53288e73b196e64e", "warmup_time": -1}, "benchmarks.RelationshipBenchmarks.time_explore_relationships_depth_3": {"code": "class RelationshipBenchmarks:\n    def time_explore_relationships_depth_3(self):\n        \"\"\"Benchmark relationship exploration with depth 3.\"\"\"\n    \n        async def run_explore():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"explore_relationships\",\n                    {\"path\": \"equilibrium/time_slice/profiles_2d/psi\", \"max_depth\": 3},\n                )\n    \n        return asyncio.run(run_explore())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.RelationshipBenchmarks.time_explore_relationships_depth_3", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b82a72814e05d81822fd505ba998d2ea53d6bbdc8832287c6415384a660d82c6", "warmup_time": -1}, "benchmarks.SearchBenchmarks.peakmem_search_imas_basic": {"code": "class SearchBenchmarks:\n    def peakmem_search_imas_basic(self):\n        \"\"\"Benchmark memory usage for basic search.\"\"\"\n    \n        async def run_search():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"search_imas\",\n                    {\"query\": self.fixture.sample_queries[0], \"max_results\": 5},\n                )\n    \n        return asyncio.run(run_search())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        # Warm up the server components\n        asyncio.run(self._warmup())", "name": "benchmarks.SearchBenchmarks.peakmem_search_imas_basic", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "c275e3071527ef20eadbeaabdf4a2626269262068c846aa81682daf6cb5e8f5f"}, "benchmarks.SearchBenchmarks.time_search_imas_basic": {"code": "class SearchBenchmarks:\n    def time_search_imas_basic(self):\n        \"\"\"Benchmark basic search performance.\"\"\"\n    \n        async def run_search():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"search_imas\",\n                    {\"query\": self.fixture.sample_queries[0], \"max_results\": 5},\n                )\n    \n        return asyncio.run(run_search())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        # Warm up the server components\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.SearchBenchmarks.time_search_imas_basic", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ad6f7f01796c7ae2a28fbad3ce200a5fb103be33605d97c6c776d1fb55b0703e", "warmup_time": -1}, "benchmarks.SearchBenchmarks.time_search_imas_complex_query": {"code": "class SearchBenchmarks:\n    def time_search_imas_complex_query(self):\n        \"\"\"Benchmark complex query performance.\"\"\"\n    \n        async def run_search():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"search_imas\",\n                    {\n                        \"query\": \"plasma temperature AND magnetic field\",\n                        \"max_results\": 15,\n                    },\n                )\n    \n        return asyncio.run(run_search())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        # Warm up the server components\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.SearchBenchmarks.time_search_imas_complex_query", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "18dddfd0c15a52f4e5393ae78086634778d81d97a9659edff200f59421439a92", "warmup_time": -1}, "benchmarks.SearchBenchmarks.time_search_imas_single_ids": {"code": "class SearchBenchmarks:\n    def time_search_imas_single_ids(self):\n        \"\"\"Benchmark search with single IDS filtering.\"\"\"\n    \n        async def run_search():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"search_imas\",\n                    {\n                        \"query\": self.fixture.sample_queries[1],\n                        \"ids_name\": self.fixture.single_ids,\n                        \"max_results\": 10,\n                    },\n                )\n    \n        return asyncio.run(run_search())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        # Warm up the server components\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.SearchBenchmarks.time_search_imas_single_ids", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "fbe791b2e2d6ced592bac7fafb679857b9a1639dfedacab3d6937b45a95461f6", "warmup_time": -1}, "benchmarks.StructureAnalysisBenchmarks.time_analyze_ids_structure_equilibrium": {"code": "class StructureAnalysisBenchmarks:\n    def time_analyze_ids_structure_equilibrium(self):\n        \"\"\"Benchmark structure analysis for equilibrium IDS.\"\"\"\n    \n        async def run_analysis():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"analyze_ids_structure\", {\"ids_name\": \"equilibrium\"}\n                )\n    \n        return asyncio.run(run_analysis())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.StructureAnalysisBenchmarks.time_analyze_ids_structure_equilibrium", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c71f17e27dbd69590d74652f5b17474928ad9a57fcb916836ddb32fb6e62924e", "warmup_time": -1}, "benchmarks.StructureAnalysisBenchmarks.time_analyze_ids_structure_single": {"code": "class StructureAnalysisBenchmarks:\n    def time_analyze_ids_structure_single(self):\n        \"\"\"Benchmark structure analysis for single IDS.\"\"\"\n    \n        async def run_analysis():\n            async with self.fixture.client:\n                return await self.fixture.client.call_tool(\n                    \"analyze_ids_structure\", {\"ids_name\": self.fixture.single_ids}\n                )\n    \n        return asyncio.run(run_analysis())\n\n    def setup(self):\n        \"\"\"Setup benchmark environment.\"\"\"\n        self.fixture = _benchmark_fixture\n        asyncio.run(self._warmup())", "min_run_count": 2, "name": "benchmarks.StructureAnalysisBenchmarks.time_analyze_ids_structure_single", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "18d545776d22eb766d7d04902846387b0b7e87f6594295d1ded87c953d240f7a", "warmup_time": -1}}, "machines": {"github-actions": {"machine": "github-actions", "os": "Linux Ubuntu 22.04.5 LTS", "ram": "15GB", "version": 1}}, "tags": {"v0.1.0": 22, "v1.0.0": 36, "v1.5.3": 60, "v1.5.4": 60, "v1.5.5": 60, "v0.1.1": 24, "v0.1.2": 25, "v0.2.0": 31, "v1.1.0": 38, "v1.2.0": 39, "v1.2.1": 40, "v1.2.2": 41, "v1.3.0": 42, "v1.3.1": 43, "v1.3.2": 46, "v1.3.3": 48, "v1.4.0": 51, "v1.5.0": 57, "v1.5.1": 58, "v1.5.2": 59, "v1.6.0": 61}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}